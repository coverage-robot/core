WITH
  unnested AS (
    SELECT
      upload.tag,
      upload.totalLines,
      upload.commit,
      fileName,
      lineNumber,
      TYPE = 'METHOD' AS containsMethod,
      TYPE = 'BRANCH' AS containsBranch,
      TYPE = 'STATEMENT' AS containsStatement,
      (
        SELECT
          IF (
            value <> '',
            CAST(value AS int),
            0
          )
        FROM
          UNNEST(metadata)
        WHERE
          KEY = "lineHits"
      ) AS hits,
      ARRAY(
        SELECT
          SUM(
            CAST(branchHits AS INT64)
          )
        FROM
          UNNEST(
            JSON_VALUE_ARRAY(
              (
                SELECT
                  value
                FROM
                  UNNEST(metadata)
                WHERE
                  KEY = "branchHits"
              )
            )
          ) AS branchHits
        WITH
          OFFSET AS branchIndex
        GROUP BY
          branchIndex,
          branchHits
      ) AS branchHits
    FROM
      `mock-table` AS upload
      INNER JOIN `mock-line-coverage-table` AS LINES ON LINES.uploadId = upload.uploadId
    WHERE
      1 = 1
      AND upload.provider = @PROVIDER
      AND upload.owner = @OWNER
      AND upload.repository = @REPOSITORY
      AND upload.commit = @COMMIT
      AND upload.uploadId IN UNNEST(@UPLOADS)
      AND DATE(LINES.ingestTime) IN UNNEST(@INGEST_PARTITIONS)
      AND (
        (
          LINES.fileName = "1"
          AND LINES.lineNumber IN (1, 2, 3)
        )
        OR(
          LINES.fileName = "2"
          AND LINES.lineNumber IN (1, 2, 3)
        )
      )
  ),
  branchingLines AS (
    SELECT
      fileName,
      lineNumber,
      MAX(containsMethod) AS containsMethod,
      MAX(containsBranch) AS containsBranch,
      MAX(containsStatement) AS containsStatement,
      SUM(hits) AS hits,
      branchIndex,
      SUM(branchHit) > 0 AS isBranchedLineHit
    FROM
      unnested,
      UNNEST(
        IF(
          ARRAY_LENGTH(branchHits) = 0,
          [hits],
          branchHits
        )
      ) AS branchHit
    WITH
      OFFSET AS branchIndex
    GROUP BY
      fileName,
      lineNumber,
      branchIndex
  ),
  LINES AS (
    SELECT
      fileName,
      lineNumber,
      MAX(containsMethod) AS containsMethod,
      MAX(containsBranch) AS containsBranch,
      MAX(containsStatement) AS containsStatement,
      COUNTIF(containsBranch = TRUE) AS totalBranches,
      COUNTIF(
        containsBranch = TRUE
        AND isBranchedLineHit = TRUE
      ) AS coveredBranches,
      IF(
        -- Check that the line hits are 0 (i.e. not executed) and that, if theres a branch, it's
        -- definitely not been covered at all (as we'll want to show that as a partial line)
        SUM(hits) = 0
        AND COUNTIF(
          containsBranch = TRUE
          AND isBranchedLineHit = TRUE
        ) = 0,
        "uncovered",
        IF (
          MIN(isBranchedLineHit) = false,
          "partial",
          "covered"
        )
      ) AS state
    FROM
      branchingLines
    GROUP BY
      fileName,
      lineNumber
  ),
  summedCoverage AS (
    SELECT
      COUNT(*) AS LINES,
      COALESCE(
        SUM(
          IF(state = "covered", 1, 0)
        ),
        0
      ) AS covered,
      COALESCE(
        SUM(
          IF(state = "partial", 1, 0)
        ),
        0
      ) AS PARTIAL,
      COALESCE(
        SUM(
          IF(state = "uncovered", 1, 0)
        ),
        0
      ) AS uncovered,
    FROM
      LINES
  )
SELECT
  SUM(LINES) AS `lines`,
  SUM(covered) AS covered,
  SUM(PARTIAL) AS `partial`,
  SUM(uncovered) AS uncovered,
  (
    SUM(covered) + SUM(PARTIAL)
  ) / IF(
    SUM(LINES) = 0,
    1,
    SUM(LINES)
  ) * 100 AS coveragePercentage
FROM
  summedCoverage