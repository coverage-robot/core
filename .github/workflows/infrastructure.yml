name: Infrastructure

on:
    push:
        branches:
            - master
        paths:
            - 'infrastructure/**'
            - '**/infrastructure/**'

    pull_request:
        branches:
            - master
        paths:
            - 'infrastructure/**'
            - '**/infrastructure/**'

    workflow_dispatch:

concurrency:
    group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
    cancel-in-progress: true

defaults:
    run:
        working-directory: './infrastructure'

env:
    php-version: "8.2"
    
jobs:
    lint:
        name: "Lint"
        runs-on: ubuntu-latest
        permissions:
            contents: read
            security-events: write
            actions: read
        steps:
            -   uses: actions/checkout@v3

            -   name: Run Checkov
                uses: bridgecrewio/checkov-action@v12
                with:
                    quiet: true
                    soft_fail: true

    plan:
        name: "Plan"
        runs-on: ubuntu-latest
        needs: lint
        permissions:
            contents: read
            pull-requests: write
        steps:
            -   uses: actions/checkout@v3

            -   uses: aws-actions/configure-aws-credentials@v1
                with:
                    aws-region: eu-west-2
                    aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                    aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

            -   uses: shivammathur/setup-php@v2
                with:
                    php-version: ${{env.php-version}}

            -   name: Install Dependencies
                working-directory: ${{ github.workspace }}/services
                run: |
                    for f in *; do
                        cd "${{ github.workspace }}/services"
                        if [ -d "$f" ]; then
                            composer=(`find "$f" -maxdepth 1 -name "composer.json"`)
                            if [ ${#composer[@]} -gt 0 ]; then
                                cd "$f"
                                echo "Installing dependencies for $f"
                                composer install
                            else
                                echo "No composer.json found for $f"
                            fi
                        else
                            echo "$f is not a directory"
                        fi
                    done

            -   name: Run Initialise
                id: init
                run: terraform init

            -   name: Run Validation
                id: validate
                run: terraform validate -no-color

            -   name: Run Format
                id: format
                continue-on-error: true
                run: terraform fmt -check

            -   name: Run Plan
                id: plan
                run: terraform plan -no-color
                continue-on-error: true

            -   uses: actions/github-script@v6
                if: github.event_name == 'pull_request'
                env:
                    PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
                with:
                    github-token: ${{ secrets.GITHUB_TOKEN }}
                    script: |
                        const { data: comments } = await github.rest.issues.listComments({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          issue_number: context.issue.number,
                        })

                        const botComment = comments.find(comment => {
                          return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
                        })

                        const output = `#### Terraform Format and Style üñå\`${{ steps.format.outcome }}\`
                        #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
                        #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
                        <details><summary>Validation Output</summary>

                        \`\`\`\n
                        ${{ steps.validate.outputs.stdout }}
                        \`\`\`

                        </details>

                        #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

                        <details><summary>Show Plan</summary>

                        \`\`\`\n
                        ${process.env.PLAN}
                        \`\`\`

                        </details>`;

                        if (botComment) {
                          github.rest.issues.updateComment({
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                            comment_id: botComment.id,
                            body: output
                          })
                        } else {
                          github.rest.issues.createComment({
                            issue_number: context.issue.number,
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                            body: output
                          })
                        }