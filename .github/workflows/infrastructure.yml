name: Infrastructure

on:
    push:
        branches:
            - master
        paths:
            - 'infrastructure/**'
            - '**/infrastructure/**'

    pull_request:
        branches:
            - master
        paths:
            - 'infrastructure/**'
            - '**/infrastructure/**'

    workflow_dispatch:

concurrency:
    group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
    cancel-in-progress: true

jobs:
    lint:
        name: "Lint"
        runs-on: ubuntu-latest
        permissions:
            contents: read
            security-events: write
            actions: read
        steps:
            -   uses: actions/checkout@v3

            -   name: Run Checkov
                uses: bridgecrewio/checkov-action@v12
                with:
                    # This will add both a CLI output to the console and create a results.sarif file
                    output_format: cli,sarif
                    output_file_path: console,results.sarif

                # Results are generated only on a success or failure
                # this is required since GitHub by default won't run the next step
                # when the previous one has failed. Security checks that do not pass will 'fail'.
                # An alternative is to add `continue-on-error: true` to the previous step
                # Or 'soft_fail: true' to checkov.
            -   name: Upload SARIF file
                uses: github/codeql-action/upload-sarif@v2
                if: success() || failure()
                with:
                    sarif_file: results.sarif

    plan:
        name: "Plan"
        runs-on: ubuntu-latest
        permissions:
            pull-requests: write
        steps:
            -   uses: actions/checkout@v3

            -   name: Run Initialise
                id: init
                run: terraform init

            -   name: Run Validation
                id: validate
                run: terraform validate -no-color

            -   name: Run Formatter
                id: format
                continue-on-error: true
                run: terraform fmt -check

            -   name: Run Plan
                id: plan
                run: terraform plan -no-color
                continue-on-error: true

            -   uses: actions/github-script@v6
                if: github.event_name == 'pull_request'
                env:
                    PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
                with:
                    github-token: ${{ secrets.GITHUB_TOKEN }}
                    script: |
                        const { data: comments } = await github.rest.issues.listComments({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          issue_number: context.issue.number,
                        })

                        const botComment = comments.find(comment => {
                          return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
                        })

                        const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
                        #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
                        #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
                        <details><summary>Validation Output</summary>

                        \`\`\`\n
                        ${{ steps.validate.outputs.stdout }}
                        \`\`\`

                        </details>

                        #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

                        <details><summary>Show Plan</summary>

                        \`\`\`\n
                        ${process.env.PLAN}
                        \`\`\`

                        </details>

                        *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

                        if (botComment) {
                          github.rest.issues.updateComment({
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                            comment_id: botComment.id,
                            body: output
                          })
                        } else {
                          github.rest.issues.createComment({
                            issue_number: context.issue.number,
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                            body: output
                          })
                        }