name: Ingest

on:
    push:
        branches:
            - main
        paths:
            - 'services/ingest/**'
            - '.github/workflows/ingest.yml'
            - 'packages/**'

    pull_request:
        branches:
            - main
        paths:
            - 'services/ingest/**'
            - '.github/workflows/ingest.yml'
            - 'packages/**'

    workflow_dispatch:

concurrency:
    group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
    cancel-in-progress: true

defaults:
    run:
        shell: bash
        working-directory: './services/ingest'

env:
    php-version: "8.3"
    working-directory: './services/ingest'
    workspace: 'prod'
    sentry-dsn: 'https://6a792bd4106f38cbd9c195540f3a8147@o4506265435176960.ingest.sentry.io/4506265444220928'

jobs:
    build:
        name: "Build"
        runs-on: ubuntu-latest
        steps:
            -   uses: actions/checkout@v4

            -   uses: shivammathur/setup-php@v2
                with:
                    php-version: ${{env.php-version}}

            -   name: Validate Composer configuration
                run: composer validate

            -   name: Setup environment variables
                uses: SpicyPizza/create-envfile@v2.0
                with:
                    envkey_APP_ENV: "dev"
                    envkey_APP_SECRET: ${{ secrets.APP_SECRET }}
                    directory: ${{ env.working-directory }}
                    file_name: .env.local
                    fail_on_empty: false

            -   name: Setup test environment variables
                uses: SpicyPizza/create-envfile@v2.0
                with:
                    envkey_APP_SECRET: ${{ secrets.APP_SECRET }}
                    directory: ${{ env.working-directory }}
                    file_name: .env.test.local
                    fail_on_empty: false

            -   name: Install Composer dependencies
                run: composer install --prefer-dist --no-progress

                # For Psalm's symfony plugin, which requires the test containers
            -   name: Warm testing environment cache
                run: php bin/console cache:warmup --env=test

                # The base rector config needs to be available for the linting step
            -   name: Archive build package
                run: |
                    cp -r ${{ github.workspace }}/.git ./
                    cp -r ${{ github.workspace }}/rector.php ./rector-base.php
                    zip -q -r build.zip ./

            -   name: Upload build package to artifact storage
                uses: actions/upload-artifact@v4
                with:
                    name: build
                    if-no-files-found: error
                    path: ${{ env.working-directory }}/build.zip
                    retention-days: 1

    lint:
        name: "Lint"
        runs-on: ubuntu-latest
        needs: build

        steps:
            -   name: Make services folder structure
                working-directory: "./"
                run: mkdir -p ${{ env.working-directory }}

            -   name: Download build from artifact storage
                uses: actions/download-artifact@v4
                with:
                    name: build
                    path: ${{ env.working-directory }}

            -   name: Extract build package
                run: |
                    umask 644
                    unzip -q build.zip -d ./
                    mv ./rector-base.php ${{ github.workspace }}/rector.php
                    mv ./.git ${{ github.workspace }}/.git

            -   uses: shivammathur/setup-php@v2
                with:
                    php-version: ${{ env.php-version }}

            -   name: Run PHP_CodeSniffer
                run: composer lint:style

            -   name: Run Rector
                run: composer lint:rector

            -   name: Run Psalm
                run: composer lint:static-analysis

            -   name: Run Psalm Security Analysis
                run: composer lint:security

            -   name: Run Terraform Format
                uses: dflook/terraform-fmt-check@v1
                with:
                    workspace: ${{ env.workspace }}
                    path: ${{ env.working-directory }}/infrastructure

            -   name: Run Terraform Validate
                uses: dflook/terraform-validate@v1
                with:
                    workspace: ${{ env.workspace }}
                    path: ${{ env.working-directory }}/infrastructure

    ingest-tests:
        name: "Ingest Tests"
        runs-on: ubuntu-latest
        needs: lint

        steps:
            -   name: Make services folder structure
                working-directory: "./"
                run: mkdir -p ${{ env.working-directory }}

            -   name: Download build from artifact storage
                uses: actions/download-artifact@v4
                with:
                    name: build
                    path: ${{ env.working-directory }}

            -   name: Extract build package
                run: |
                    umask 644
                    unzip -q build.zip -d ./
                    mv ./rector-base.php ${{ github.workspace }}/rector.php
                    mv ./.git ${{ github.workspace }}/.git

            -   uses: shivammathur/setup-php@v2
                with:
                    php-version: ${{ env.php-version }}

            -   name: Run PHPUnit
                run: |
                    composer test:unit -- --coverage-clover='./coverage.xml' --configuration='./phpunit.xml.dist'
                shell: bash

            -   uses: coverage-robot/action@v1.0.4
                with:
                    token: ${{ secrets.COVERAGE_TOKEN }}
                    files: |
                        ${{ env.working-directory }}/coverage.xml
                    tag: ingest-service
                continue-on-error: true

    plan:
        name: Plan
        runs-on: ubuntu-latest
        needs: ingest-tests
        if: github.ref != 'refs/heads/main'
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        permissions:
            id-token: write
            contents: read
            pull-requests: write
        steps:
            -   name: Make services folder structure
                working-directory: "./"
                run: mkdir -p ${{ env.working-directory }}

            -   name: Download build from artifact storage
                uses: actions/download-artifact@v4
                with:
                    name: build
                    path: ${{ env.working-directory }}

            -   name: Extract build package
                run: |
                    umask 644
                    unzip -q build.zip -d ./
                    mv ./rector-base.php ${{ github.workspace }}/rector.php
                    mv ./.git ${{ github.workspace }}/.git

            -   uses: aws-actions/configure-aws-credentials@v4
                with:
                    aws-region: eu-west-2
                    aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                    aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

            -   name: Run Plan
                uses: dflook/terraform-plan@v1
                with:
                    workspace: ${{ env.workspace }}
                    add_github_comment: true
                    path: ${{ env.working-directory }}/infrastructure
                    var_file: ${{ env.working-directory }}/infrastructure/${{ env.workspace }}.tfvars

    deployment:
        name: Deployment
        runs-on: ubuntu-latest
        needs: ingest-tests
        if: github.ref == 'refs/heads/main'
        environment: ingest-prod
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        permissions:
            id-token: write
            contents: read
            pull-requests: write
        steps:
            -   uses: actions/checkout@v4

            -   uses: shivammathur/setup-php@v2
                with:
                    php-version: ${{ env.php-version }}

            -   uses: aws-actions/configure-aws-credentials@v4
                with:
                    aws-region: eu-west-2
                    aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                    aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

            -   name: Setup environment variables
                uses: SpicyPizza/create-envfile@v2.0
                with:
                    envkey_APP_SECRET: ${{ secrets.APP_SECRET }}
                    envkey_SENTRY_DSN: ${{ env.sentry-dsn }}
                    directory: ${{ env.working-directory }}
                    file_name: .env.local
                    fail_on_empty: false

                # Install Composer dependencies, with symlinks mirrored (e.g. dependencies from the packages folder
                # are copied directly into the vendor folder, rather than symlinked - as Terraform doesn't like that during archiving)
            -   name: Install Composer dependencies
                run: composer install --prefer-dist --optimize-autoloader --classmap-authoritative --no-dev --no-scripts
                env:
                    COMPOSER_MIRROR_PATH_REPOS: 1

            -   name: Clear platform cache
                run: php bin/console cache:clear --no-debug --no-warmup --env=${{ env.workspace }}

            -   name: Compile environment variables
                run: composer dump-env ${{ env.workspace }}

            -   name: Warm platform cache
                run: php bin/console cache:warmup --env=${{ env.workspace }}

            -   name: Add BigQuery Service Account
                uses: DamianReeves/write-file-action@v1.2
                with:
                    path: ${{ env.working-directory }}/config/bigquery.json
                    write-mode: overwrite
                    contents: ${{ secrets.BIGQUERY_SERVICE_ACCOUNT }}

            -   name: Run Apply
                uses: dflook/terraform-apply@v1
                with:
                    workspace: ${{ env.workspace }}
                    path: ${{ env.working-directory }}/infrastructure
                    var_file: ${{ env.working-directory }}/infrastructure/${{ env.workspace }}.tfvars

                    # The plan will already have been generated on the PR, so approving here should be fine
                    auto_approve: true